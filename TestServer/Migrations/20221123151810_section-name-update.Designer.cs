// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestServer;

#nullable disable

namespace TestServer.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20221123151810_section-name-update")]
    partial class sectionnameupdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TestServer.Course", b =>
                {
                    b.Property<string>("course_code")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("coordinator_id")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("ProfX");

                    b.Property<string>("course_name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("department")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("lecture_credits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(2,1)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("practical_credits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(2,1)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("total_credits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(2,1)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("tutorial_credits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(2,1)")
                        .HasDefaultValue(0m);

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("course_code");

                    b.HasIndex("coordinator_id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("TestServer.Event", b =>
                {
                    b.Property<int>("event_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("ignore_holiday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("is_course")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("owner")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("ProfX");

                    b.HasKey("event_id");

                    b.HasIndex("owner");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("TestServer.Instructor", b =>
                {
                    b.Property<string>("instructor_id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("department")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("email_id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("instructor_id");

                    b.HasIndex("email_id")
                        .IsUnique();

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("TestServer.Instructor_Of", b =>
                {
                    b.Property<string>("course_code")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("instrucor_id")
                        .HasColumnType("varchar(255)");

                    b.HasKey("course_code", "instrucor_id");

                    b.HasIndex("instrucor_id");

                    b.ToTable("Instrucor_Ofs");
                });

            modelBuilder.Entity("TestServer.Occurence", b =>
                {
                    b.Property<int>("occurence_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("event_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("date_end")
                        .HasColumnType("date");

                    b.Property<DateTime>("date_start")
                        .HasColumnType("date");

                    b.Property<int>("day")
                        .HasColumnType("int");

                    b.Property<string>("room_code")
                        .HasColumnType("varchar(255)");

                    b.Property<TimeSpan>("time_begin")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("time_end")
                        .HasColumnType("time");

                    b.HasKey("occurence_id", "event_id");

                    b.HasIndex("event_id");

                    b.HasIndex("room_code");

                    b.ToTable("Occurences");

                    b.HasCheckConstraint("Day_Cons", "day < 7 AND day > -1");
                });

            modelBuilder.Entity("TestServer.Room", b =>
                {
                    b.Property<string>("room_code")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("building")
                        .HasColumnType("longtext");

                    b.Property<int>("capacity")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .HasColumnType("longtext");

                    b.HasKey("room_code");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("TestServer.Section", b =>
                {
                    b.Property<string>("section_id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("course_code")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("event_id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("All");

                    b.HasKey("section_id");

                    b.HasIndex("course_code");

                    b.HasIndex("event_id")
                        .IsUnique();

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("TestServer.Teaches", b =>
                {
                    b.Property<string>("section_id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("instructor_id")
                        .HasColumnType("varchar(255)");

                    b.HasKey("section_id", "instructor_id");

                    b.HasIndex("instructor_id");

                    b.ToTable("Teaches_");
                });

            modelBuilder.Entity("TestServer.Course", b =>
                {
                    b.HasOne("TestServer.Instructor", "coordinator")
                        .WithMany("courses")
                        .HasForeignKey("coordinator_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("coordinator");
                });

            modelBuilder.Entity("TestServer.Event", b =>
                {
                    b.HasOne("TestServer.Instructor", "Owner")
                        .WithMany("events")
                        .HasForeignKey("owner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TestServer.Instructor_Of", b =>
                {
                    b.HasOne("TestServer.Course", "course")
                        .WithMany("instrucor_of")
                        .HasForeignKey("course_code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestServer.Instructor", "instructor")
                        .WithMany("instrucor_of")
                        .HasForeignKey("instrucor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("instructor");
                });

            modelBuilder.Entity("TestServer.Occurence", b =>
                {
                    b.HasOne("TestServer.Event", "event_")
                        .WithMany("occurences")
                        .HasForeignKey("event_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestServer.Room", "room")
                        .WithMany("occurences")
                        .HasForeignKey("room_code");

                    b.Navigation("event_");

                    b.Navigation("room");
                });

            modelBuilder.Entity("TestServer.Section", b =>
                {
                    b.HasOne("TestServer.Course", "course")
                        .WithMany("sections")
                        .HasForeignKey("course_code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestServer.Event", "Event")
                        .WithOne("section")
                        .HasForeignKey("TestServer.Section", "event_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("course");
                });

            modelBuilder.Entity("TestServer.Teaches", b =>
                {
                    b.HasOne("TestServer.Instructor", "instructor")
                        .WithMany("teaches")
                        .HasForeignKey("instructor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestServer.Section", "section")
                        .WithMany("teaches")
                        .HasForeignKey("section_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("instructor");

                    b.Navigation("section");
                });

            modelBuilder.Entity("TestServer.Course", b =>
                {
                    b.Navigation("instrucor_of");

                    b.Navigation("sections");
                });

            modelBuilder.Entity("TestServer.Event", b =>
                {
                    b.Navigation("occurences");

                    b.Navigation("section");
                });

            modelBuilder.Entity("TestServer.Instructor", b =>
                {
                    b.Navigation("courses");

                    b.Navigation("events");

                    b.Navigation("instrucor_of");

                    b.Navigation("teaches");
                });

            modelBuilder.Entity("TestServer.Room", b =>
                {
                    b.Navigation("occurences");
                });

            modelBuilder.Entity("TestServer.Section", b =>
                {
                    b.Navigation("teaches");
                });
#pragma warning restore 612, 618
        }
    }
}
